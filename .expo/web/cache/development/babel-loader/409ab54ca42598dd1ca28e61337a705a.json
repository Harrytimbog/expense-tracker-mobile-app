{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useContext, useEffect, useState } from \"react\";\nimport ExpensesOutput from \"../components/ExpensesOutput/ExpensesOutput\";\nimport LoadingOverlay from \"../components/UI/LoadingOverlay\";\nimport { ExpensesContext } from \"../store/expenses-context\";\nimport { getDateMinusDays } from \"../util/date\";\nimport { fetchExpenses } from \"../util/http\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar RecentExpenses = function RecentExpenses() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isFetching = _useState2[0],\n      setIsFetching = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var expensesCtx = useContext(ExpensesContext);\n  useEffect(function () {\n    function getExpenses() {\n      var _expenses;\n\n      return _regeneratorRuntime.async(function getExpenses$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setIsFetching(true);\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(fetchExpenses());\n\n            case 4:\n              _expenses = _context.sent;\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](1);\n              setError(\"Could not fetch expenses!\");\n\n            case 10:\n              setIsFetching(false);\n              expensesCtx.setExpenses(expenses);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 7]], Promise);\n    }\n\n    getExpenses();\n  }, []);\n\n  if (isFetching) {\n    return _jsx(LoadingOverlay, {});\n  }\n\n  var recentExpenses = expensesCtx.expenses.filter(function (expense) {\n    var today = new Date();\n    var days7DaysAgo = getDateMinusDays(today, 7);\n    return expense.date >= days7DaysAgo && expense.date <= today;\n  });\n  return _jsx(ExpensesOutput, {\n    expenses: recentExpenses,\n    expensesPeriod: \"Last 7 Days\",\n    fallbackText: \"No expenses registered for the last 7 days.\"\n  });\n};\n\nexport default RecentExpenses;","map":{"version":3,"names":["useContext","useEffect","useState","ExpensesOutput","LoadingOverlay","ExpensesContext","getDateMinusDays","fetchExpenses","RecentExpenses","isFetching","setIsFetching","error","setError","expensesCtx","getExpenses","expenses","setExpenses","recentExpenses","filter","expense","today","Date","days7DaysAgo","date"],"sources":["/home/harrytimbog/code/Harrytimbog/react-native/expense-tracker-mobile-app/screens/RecentExpenses.js"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\nimport ExpensesOutput from \"../components/ExpensesOutput/ExpensesOutput\";\nimport LoadingOverlay from \"../components/UI/LoadingOverlay\";\nimport { ExpensesContext } from \"../store/expenses-context\";\nimport { getDateMinusDays } from \"../util/date\";\nimport { fetchExpenses } from \"../util/http\";\n\nconst RecentExpenses = () => {\n  const [isFetching, setIsFetching] = useState(true);\n  const [error, setError] = useState();\n  const expensesCtx = useContext(ExpensesContext);\n\n  useEffect(() => {\n    async function getExpenses() {\n      setIsFetching(true);\n      try {\n        const expenses = await fetchExpenses();\n      } catch (error) {\n        setError(\"Could not fetch expenses!\");\n      }\n      setIsFetching(false);\n      expensesCtx.setExpenses(expenses);\n    }\n\n    getExpenses();\n  }, []);\n\n  if (isFetching) {\n    return <LoadingOverlay />;\n  }\n\n  const recentExpenses = expensesCtx.expenses.filter((expense) => {\n    const today = new Date();\n    const days7DaysAgo = getDateMinusDays(today, 7);\n\n    return expense.date >= days7DaysAgo && expense.date <= today;\n  });\n\n  return (\n    <ExpensesOutput\n      expenses={recentExpenses}\n      expensesPeriod=\"Last 7 Days\"\n      fallbackText=\"No expenses registered for the last 7 days.\"\n    />\n  );\n};\n\nexport default RecentExpenses;\n"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;AACA,OAAOC,cAAP;AACA,OAAOC,cAAP;AACA,SAASC,eAAT;AACA,SAASC,gBAAT;AACA,SAASC,aAAT;;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;EAC3B,gBAAoCN,QAAQ,CAAC,IAAD,CAA5C;EAAA;EAAA,IAAOO,UAAP;EAAA,IAAmBC,aAAnB;;EACA,iBAA0BR,QAAQ,EAAlC;EAAA;EAAA,IAAOS,KAAP;EAAA,IAAcC,QAAd;;EACA,IAAMC,WAAW,GAAGb,UAAU,CAACK,eAAD,CAA9B;EAEAJ,SAAS,CAAC,YAAM;IACd,SAAea,WAAf;MAAA;;MAAA;QAAA;UAAA;YAAA;cACEJ,aAAa,CAAC,IAAD,CAAb;cADF;cAAA;cAAA,iCAG2BH,aAAa,EAHxC;;YAAA;cAGUQ,SAHV;cAAA;cAAA;;YAAA;cAAA;cAAA;cAKIH,QAAQ,CAAC,2BAAD,CAAR;;YALJ;cAOEF,aAAa,CAAC,KAAD,CAAb;cACAG,WAAW,CAACG,WAAZ,CAAwBD,QAAxB;;YARF;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;IAWAD,WAAW;EACZ,CAbQ,EAaN,EAbM,CAAT;;EAeA,IAAIL,UAAJ,EAAgB;IACd,OAAO,KAAC,cAAD,KAAP;EACD;;EAED,IAAMQ,cAAc,GAAGJ,WAAW,CAACE,QAAZ,CAAqBG,MAArB,CAA4B,UAACC,OAAD,EAAa;IAC9D,IAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;IACA,IAAMC,YAAY,GAAGhB,gBAAgB,CAACc,KAAD,EAAQ,CAAR,CAArC;IAEA,OAAOD,OAAO,CAACI,IAAR,IAAgBD,YAAhB,IAAgCH,OAAO,CAACI,IAAR,IAAgBH,KAAvD;EACD,CALsB,CAAvB;EAOA,OACE,KAAC,cAAD;IACE,QAAQ,EAAEH,cADZ;IAEE,cAAc,EAAC,aAFjB;IAGE,YAAY,EAAC;EAHf,EADF;AAOD,CAtCD;;AAwCA,eAAeT,cAAf"},"metadata":{},"sourceType":"module"}